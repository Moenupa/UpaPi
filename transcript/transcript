#!/bin/bash

# help message
usage()
{
	echo "Student Transcript Generator 1.0.0"
	echo "Copyright Â© 2021 WANG Meng SID: 19078543d"
	echo "Visit Github https://github.com/Moenupa for author details"
	echo
	echo "Usage: ./transcript [name]"
	echo "generate student transcript for parameter [name], if none then generate for all possible"
	echo "data from files REGEX\`$dataRegEx\` in posix-extended"
	echo
	echo "Actions:"
	echo "  -help                get help"
}

# global dir for tmp files
tmpDir="/tmp/$(echo $UID | md5sum | awk '{print $1}')"
dataRegEx="\.\/[comp|COMP][0-9a-zA-Z]+-[0-9]{4}\.txt"

if [[ $* == "--help" || $* == "-help" ]]; then usage; exit; fi

# generate md5 sum of matched data files
generateMD5()
{
	touch $tmpDir/$1.md5sum
	md5sum $(find . -type f -regextype posix-extended -regex $dataRegEx -exec echo {} \;) > $tmpDir/$1.md5sum
}

# change data format, output to tmpFile in tmpDir:
# $ cat $tmpDir/name.dat 
# year subject credit grade
preprocessing()
{
	for f in `find . -type f -regextype posix-extended -regex $dataRegEx | sort`; do 
		sed '1d' $f | while read name grade; do
			if ! test -f $tmpDir/$name.dat; then touch $tmpDir/$name.dat; fi
			echo "$(head -n 1 $f | awk '{if ($3!="") {print $2,$1,$3} else {print $2,$1,"3"}}') $grade" >> "$tmpDir/$name.dat"
		done
	done 
}

# initialize the environment
init()
{
	if ! test -d $tmpDir; then
		mkdir $tmpDir
	fi

	if ! test -f $tmpDir/data.md5sum; then 
		# echo "FIRST USE, setting up environment..." 
		generateMD5 "data"
		preprocessing
	else # if md5 file exist, then check it
		generateMD5 "temp"
		if [ $(md5sum $tmpDir/data.md5sum | cut -d ' ' -f1) != $(md5sum $tmpDir/temp.md5sum | cut -d ' ' -f1) ]; then
			# echo "NOT FIRST USE but a UPDATE exist | MD5 failed"
			rm -f $tmpDir/*.dat; preprocessing
			cp $tmpDir/temp.md5sum $tmpDir/data.md5sum
		fi
		rm -f $tmpDir/temp.md5sum
	fi
	
	# setting up awk script
	if ! test -f "$tmpDir/GP.awk"; then
		touch $tmpDir/GP.awk
		cat > $tmpDir/GP.awk <<EOF
#!/bin/awk -f
function getgp(year,grade,credit) {
	if (strtonum(year) >= 2020) {
		MAP["A"]=4; MAP["B"]=3; MAP["C"]=2; MAP["D"]=1; MAP["+"]=.3; MAP["-"]=-.3
	}
	else {
		MAP["A"]=4; MAP["B"]=3; MAP["C"]=2; MAP["D"]=1; MAP["F"]=0; MAP["+"]=.5
	}
	if (length(grade)==1)
		return credit*MAP[grade]
	else
		return credit*(MAP[substr(grade,1,1)]+MAP[substr(grade,2,1)])
}
BEGIN {
	gp=0
	credit=0
	split("", prev)
	printf "Year    Subject Credit Grade   GP\n"
}
{
	if (\$2 != prev[2])
		printf "%4d %10s %6d %5s %3.1f\n",\$1,\$2,\$3,\$4,getgp(\$1,\$4,\$3)
	else {
		printf "%4d %10s %6d %5s %3.1f retake\n",\$1,\$2,\$3,\$4,getgp(\$1,\$4,\$3)
		gp-=getgp(prev[1],prev[4],prev[3])
		credit-=prev[3]
	}
	split(\$0, prev)
	gp+=getgp(\$1,\$4,\$3)
	credit+=\$3
}
END {
	printf("Credits %3d\n", credit)
	printf("GPA:   %3.2f\n\n", gp/credit)
}
EOF
	fi
}

# generate transcript for target student
genTranscript()
{
	echo "Transcript for $(basename -s .dat $1)"
	awk -f $tmpDir/GP.awk $1
}

# main body
init
if [ $# -gt 0 ]; then 
	for stu in $@; do
		if ! test -f $tmpDir/$stu.dat; then
			echo "==> warning: transcript for student '$stu' is invalid"
		else 
			genTranscript "$tmpDir/$stu.dat"
		fi
	done
else
	for f in $tmpDir/*.dat; do
		genTranscript "$f"
	done
fi
